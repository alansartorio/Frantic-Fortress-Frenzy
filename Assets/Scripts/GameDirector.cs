using System;
using System.Collections;
using System.Collections.Generic;
using Exceptions;
using UnityEngine;
using UnityEngine.Events;

[Serializable]
public class GameDirector : MonoBehaviour
{
    private enum GameState
    {
        Starting,
        Wave,
        Rest,
        GameOver
    }

    public struct SpawnerInfo
    {
        public UnityAction<Wave> onNewWave;
        public UnityEvent enemiesWiped;
        public UnityAction onGameOver;
    }

    [SerializeField] private static readonly float WaveInterval = 3f;
    [SerializeField] private static readonly float StartInterval = 5f;
    [SerializeField] private GameState _state;
    [SerializeField] private GameObject[] _enemies; //TODO: change for autogenerated
    private UnityEvent<Wave> _newWave = new();
    private UnityEvent _rest = new();
    private UnityEvent _gameOver = new();
    private Timer _waveTimer;
    private Timer _startTimer;
    private int _spawnCount = 0;
    private int _idleSpawns = 0;
    
    // Start is called before the first frame update
    void Start()
    {
        _state = GameState.Starting;
        
        _waveTimer = new Timer("WaveTimer", WaveInterval, true);
        _waveTimer.Stop();
        _waveTimer.onTick.AddListener(StartWave);
        
        _startTimer = new Timer("StartTimer", StartInterval, true);
        _startTimer.Restart();
        _startTimer.onTick.AddListener(StartGame);
    }

    // Update is called once per frame
    void Update()
    {
        _waveTimer.Update(Time.deltaTime);
        _startTimer?.Update(Time.deltaTime);
    }

    public void RegisterSpawn(SpawnerInfo spawnerInfo)
    {
        _newWave.AddListener(spawnerInfo.onNewWave);
        _gameOver.AddListener(spawnerInfo.onGameOver);
        
    }

    public void RegisterBase(HealthManager baseHealth)
    {
        baseHealth.onDeath.AddListener((_) => GameOver());
    }

    private void StartWave()
    {
        _state = GameState.Wave;
        _idleSpawns = 0;
        var wave = new Wave(10, _enemies);
        _newWave.Invoke(wave);
        _waveTimer.Stop();
    }

    private void StartGame()
    {
        if (_state != GameState.Starting)
        {
            throw new InvalidStateException(String.Format("State should be Starting but is %s", _state));
        }

        _startTimer = null;
        StartWave();
    }

    private void SubWaveCompleted()
    {
        if (++_idleSpawns == _spawnCount)
        {
            StartRest();
        }        
    }

    private void StartRest()
    {
        _state = GameState.Rest;
        _rest.Invoke();
        _waveTimer.Restart();
    }

    private void GameOver()
    {
        _state = GameState.GameOver;
        _gameOver.Invoke();
    }
}
